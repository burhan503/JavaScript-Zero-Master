`
Q : what is high-order functions ?
A : Basically,
  a function which takes another function as an argument and returns a function is known as a higher order function.

in other words a high order components is accept functions as argument and return also a function is called hoc.....


examples : forEach loop.. this is a function and it take another function as a argument as input .

hoc is a component that take another component  as a input.

we cannot use Hoc inside the render mathod.

another example is connet which is take mapDispatchToProp, mapStateToprops. we can create costom hoc too.


const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];

function filterOdd(arr) {
  const filteredArr = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] % 2 !== 0) {
      filteredArr.push(arr[i]);
    }
  }
  return filteredArr;
}
console.log(filterOdd(arr));

// Output:
// [ 1, 3, 5, 7, 9, 11 ]



Now let's say we also want to make a function that filters out and returns all the even numbers. We can very well go ahead and create the following function
 to achieve this:

function filterEven(arr) {
  const filteredArr = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] % 2 == 0) {
      filteredArr.push(arr[i]);
    }
  }
  return filteredArr;
}
console.log(filterEven(arr));

// Output:
// [ 2, 4, 6, 8, 10 ]

`;

`
IN THE ABOVE FUNCTIONS MOST CODE ARE SIMILER ONLY CHANGE IS LOGIC arr[i] % 2 == 0 AND arr[i] 2 == 0 FOR EVEN AND ODD..

THIS IS NOT GOOD CODING STRUCTURE


SO Let's make the function which does all the common stuff we performed in the filterOdd and filterEven functions. This will go something like this:

function filterFunction(arr, callback) {
    const filteredArr = [];
    for (let i = 0; i < arr.length; i++) {
      callback(arr[i]) ? filteredArr.push(arr[i]) : null;
    }
    return filteredArr;
  }





  // Function containing logic for filtering out odd numbers

function isOdd(x) {
  return x % 2 != 0;
}

// Function containing logic for filtering out even numbers

function isEven(x) {
  return x % 2 === 0;
}



const arr=[43,45,22,12,423,453,234,32]

filterFunction(arr, isOdd)


const arr1= [1,2,3,4]

binary=(x)=>{
  return x*2
}
THIS IS A HIGH ORDER C.
const 1rr2 = arr1.map(binary)

another example of HOF

const re = [5,2,3,4,5]
bin = (x)=> x*4
const res=re.map(bin)
console.log(res)

`;
